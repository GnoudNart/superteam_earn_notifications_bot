<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Session Management</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1, h2 { color: #333; }
        form { margin-bottom: 20px; padding: 15px; border: 1px solid #ccc; border-radius: 5px; }
        form label { display: block; margin-bottom: 5px; font-weight: bold; }
        form input[type="text"] { width: 100%; padding: 8px; margin-bottom: 10px; border: 1px solid #ddd; border-radius: 4px; box-sizing: border-box; }
        form button { padding: 10px 15px; background-color: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; }
        form button:hover { background-color: #0056b3; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .action-buttons button { margin-right: 5px; padding: 5px 10px; border-radius: 3px; cursor: pointer; }
        .action-buttons .edit { background-color: #ffc107; color: black; border: none; }
        .action-buttons .delete { background-color: #dc3545; color: white; border: none; }
        .action-buttons .edit:hover { background-color: #e0a800; }
        .action-buttons .delete:hover { background-color: #c82333; }
        #message { margin-top: 10px; padding: 10px; border-radius: 5px; display: none; }
        #message.success { background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        #message.error { background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
    </style>
</head>
<body>
<h1>Session Management</h1>

<div id="message"></div>

<h2>Create New Session</h2>
<form id="createSessionForm">
    <label for="createKey">Key:</label>
    <input type="text" id="createKey" name="key" required>

    <label for="createValue">Value (JSON string):</label>
    <input type="text" id="createValue" name="value" required>

    <button type="submit">Create Session</button>
</form>

<h2>Existing Sessions</h2>
<table id="sessionsTable">
    <thead>
    <tr>
        <th>ID</th>
        <th>Key</th>
        <th>Value</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    </tbody>
</table>

<div id="editModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); justify-content: center; align-items: center;">
    <div style="background-color: white; padding: 20px; border-radius: 8px; width: 400px;">
        <h3>Edit Session</h3>
        <form id="editSessionForm">
            <input type="hidden" id="editSessionId">
            <label for="editKey">Key:</label>
            <input type="text" id="editKey" name="key" required>

            <label for="editValue">Value (JSON string):</label>
            <input type="text" id="editValue" name="value" required>

            <button type="submit">Save Changes</button>
            <button type="button" onclick="closeEditModal()">Cancel</button>
        </form>
    </div>
</div>


<script>
    const messageDiv = document.getElementById('message');

    function showMessage(text, type) {
        messageDiv.textContent = text;
        messageDiv.className = type; // 'success' or 'error'
        messageDiv.style.display = 'block';
        setTimeout(() => {
            messageDiv.style.display = 'none';
        }, 3000); // Hide after 3 seconds
    }

    async function fetchSessions() {
        try {
            const response = await fetch('/api/sessions');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const sessions = await response.json();
            const tableBody = document.querySelector('#sessionsTable tbody');
            tableBody.innerHTML = ''; // Clear existing rows

            sessions.forEach(session => {
                const row = tableBody.insertRow();
                row.insertCell(0).textContent = session.id;
                row.insertCell(1).textContent = session.key;
                row.insertCell(2).textContent = session.value; // Display the raw JSON string

                const actionsCell = row.insertCell(3);
                actionsCell.className = 'action-buttons';

                const editButton = document.createElement('button');
                editButton.textContent = 'Edit';
                editButton.className = 'edit';
                editButton.onclick = () => openEditModal(session);
                actionsCell.appendChild(editButton);

                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'Delete';
                deleteButton.className = 'delete';
                deleteButton.onclick = () => deleteSession(session.id);
                actionsCell.appendChild(deleteButton);
            });
        } catch (error) {
            console.error('Error fetching sessions:', error);
            showMessage(`Error fetching sessions: ${error.message}`, 'error');
        }
    }

    document.getElementById('createSessionForm').addEventListener('submit', async (event) => {
        event.preventDefault();
        const key = document.getElementById('createKey').value;
        const value = document.getElementById('createValue').value;

        try {
            const response = await fetch('/api/sessions', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ key, value }),
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to create session');
            }

            await response.json();
            showMessage('Session created successfully!', 'success');
            document.getElementById('createSessionForm').reset();
            fetchSessions(); // Refresh the list
        } catch (error) {
            console.error('Error creating session:', error);
            showMessage(`Error creating session: ${error.message}`, 'error');
        }
    });

    async function deleteSession(id) {
        if (!confirm('Are you sure you want to delete this session?')) {
            return;
        }
        try {
            const response = await fetch(`/api/sessions/${id}`, {
                method: 'DELETE',
            });

            if (response.status === 204) {
                showMessage('Session deleted successfully!', 'success');
                fetchSessions(); // Refresh the list
            } else {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to delete session');
            }
        } catch (error) {
            console.error('Error deleting session:', error);
            showMessage(`Error deleting session: ${error.message}`, 'error');
        }
    }

    function openEditModal(session) {
        document.getElementById('editSessionId').value = session.id;
        document.getElementById('editKey').value = session.key;
        document.getElementById('editValue').value = session.value; // Raw JSON string
        document.getElementById('editModal').style.display = 'flex';
    }

    function closeEditModal() {
        document.getElementById('editModal').style.display = 'none';
    }

    document.getElementById('editSessionForm').addEventListener('submit', async (event) => {
        event.preventDefault();
        const id = document.getElementById('editSessionId').value;
        const key = document.getElementById('editKey').value;
        const value = document.getElementById('editValue').value;

        try {
            const response = await fetch(`/api/sessions/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ key, value }),
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to update session');
            }

            await response.json();
            showMessage('Session updated successfully!', 'success');
            closeEditModal();
            fetchSessions(); // Refresh the list
        } catch (error) {
            console.error('Error updating session:', error);
            showMessage(`Error updating session: ${error.message}`, 'error');
        }
    });

    // Initial fetch when the page loads
    document.addEventListener('DOMContentLoaded', fetchSessions);
</script>
</body>
</html>